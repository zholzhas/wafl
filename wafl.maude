load http-server.maude
load metaInterpreter.maude
load model-checker.maude

fmod LTL-EXPR is
    including LTL .
    including LANG-SYNTAX .

    subsort Funccall < Formula .
endfm

mod LTL-PROCESS is
    protecting META-LEVEL .
    protecting LANG .
    protecting COMPOSITION-PREDS .

    op processLtl : Term ~> Formula .

    vars T T' : Term .
    
    eq processLtl('true.Expr) = True .
    eq processLtl('false.Expr) = False .
    eq processLtl('True.Formula) = True .
    eq processLtl('False.Formula) = False .
    eq processLtl('~_[T]) = ~ processLtl(T) .
    eq processLtl('_/\_[T, T']) = processLtl(T) /\ processLtl(T') .
    eq processLtl('_\/_[T, T']) = processLtl(T) \/ processLtl(T') .
    eq processLtl('O_[T]) = O processLtl(T) .
    eq processLtl('_U_[T, T']) = processLtl(T) U processLtl(T') .
    eq processLtl('_R_[T, T']) = processLtl(T) R processLtl(T') .

    eq processLtl('_->_[T, T']) = processLtl(T) -> processLtl(T') .
    eq processLtl('_<->_[T, T']) = processLtl(T) <-> processLtl(T') .
    eq processLtl('<>_[T]) = <> processLtl(T) .
    eq processLtl('`[`]_[T]) = [] processLtl(T) .
    eq processLtl('_W_[T, T']) = processLtl(T) W processLtl(T') .
    eq processLtl('_|->_[T, T']) = processLtl(T) |-> processLtl(T') .
    eq processLtl('_=>_[T, T']) = processLtl(T) => processLtl(T') .
    eq processLtl('_<=>_[T, T']) = processLtl(T) <=> processLtl(T') .

    eq processLtl('`(_`)[T]) = processLtl(T) .


    eq processLtl('_`(`)[T]) = assertions(process('_`(`)[T])) .
    eq processLtl('_`(_`)[T, T']) = assertions(process('_`(_`)[T, T'])) .
endm

mod LTL-PARSING is
    protecting LTL-PROCESS .
    protecting LEXICAL .

    op parseLtl : QidList ~> Formula .

    var S : String .
    var QIL : QidList .
    eq parseLtl(QIL) = processLtl(getTerm(metaParse(upModule('LTL-EXPR, false), QIL, 'Formula))) .

    op preParseLtl : QidList -> ResultPair? .
    eq preParseLtl(QIL) = metaParse(upModule('LTL-EXPR, false), QIL, 'Formula) .

endm


mod PRED-TEST is
    protecting LTL-PARSING .

    op config : -> Configuration .
    eq config = (none).Configuration .

    op functions : -> StmtAST .
    eq functions = function("test", params(empty), 
        call("assert", args(bool(true)))) .

    op propCode : -> StmtAST .
    eq propCode = call("test", args(empty)) .
endm

fmod CLI-COMMANDS is
    including LANG-SYNTAX .
    including LTL-EXPR .

    sort Command .

    --- op model from_ : Token -> Command .
    --- op assertions from_ : Token -> Command .

    op dump init : -> Command .

    op show state : -> Command .
    op show trace : -> Command .
    --- op trace to_ : Token -> Command .

    op always_ : Expr -> Command .
    op check last state_ : Expr -> Command .
    op dump last state : -> Command .

    op ltl check_ : Formula -> Command [ prec 70 gather (e) ] .
    op dump ltl result : -> Command .
    op dump code : -> Command .

    op reset : -> Command .
    op reset code : -> Command .
    op reset model : -> Command .

    op quit : -> Command .

    op simulate : -> Command .
    op dump simulation : -> Command .
endfm

fmod LOOP-COMMANDS is
    including CLI-COMMANDS .
    including SERVER-SYNTAX .

    sort Input .
    subsorts ServiceList Command < Input .
endfm

mod CLI is
    protecting COMPOSITION + LTL-PROCESS .

    sort CliState .

    ops idle reading writing checking parsing quitting : -> CliState .
    ops loadingComposition waitingParser : String -> CliState .
    ops loadingAssertions waitingAssertionParser : String -> CliState .
    ops checkingAlways checkingLastState : ExprAST -> CliState .
    op  showingState : -> CliState .
    ops resetting resettingCode resettingModel : -> CliState .
    ops openningTraceFile printingTrace : String -> CliState .
    ops writingToTraceFile closingTraceFile : String Oid -> CliState .
    op printingTrace : -> CliState .
    op  printingToFile : String -> CliState .
    ops simulating printingSimulationResult : -> CliState .
    op dumpingSimulationResult : -> CliState .
    op dumpingLastState : -> CliState .
    op loadingTermComposition : TermList -> CliState [ctor] .
    op checkingLtl : Formula -> CliState [ctor] .
    op dumpingLtlResult : -> CliState [ctor] .
    op dumpingInit : -> CliState [ctor] .
    op dumpingCode : -> CliState [ctor] .

    op cliReader : -> Oid [ctor] .
    op CliReader : -> Cid [ctor] .

    op buf :_ : String -> Attribute [ctor] .
    op state :_ : CliState -> Attribute [ctor] .
    op composition :_ : Term? -> Attribute [ctor] .
    op assertions :_ : StmtAST -> Attribute [ctor] .
    op counterexampleState :_ : Term? -> Attribute [ctor] .
    op counterexamplePath :_ : Trace? -> Attribute [ctor] .
    op simulationResult :_ : Term? -> Attribute [ctor] .
    op input :_ : ResultPair? -> Attribute [ctor] .
    op output :_ : QidList -> Attribute [ctor] .
    op stdio :_ : Bool -> Attribute [ctor] .
    op ltlResult :_ : ModelCheckResult -> Attribute [ctor] .

    op parseCommand : String -> ResultPair? .
    op parseCommand : QidList -> ResultPair? .
    op parseLang : String -> ResultPair? .


    op mergeConfigs : Term? Term -> Term .
    op mergeConfigs : Configuration Configuration -> Configuration .

    op commandToState : Term Type -> CliState .

    op searchCounterexample : Term StmtAST -> ResultTriple? .
    op getCounterexamplePath : Term StmtAST -> Trace? .

    op getErrorPosition : ResultPair? -> Nat .

    op tokenToString : Qid -> String .

    op printTrace : Trace? -> QidList .
    op printTrace : Trace? Term -> QidList .
    
    op printEvalResult : EvalResult ~> QidList .
    op dumpConfig : Term ~> QidList .
    op printCheckResult : ModelCheckResult -> QidList .
    op printCheckResultShort : ModelCheckResult -> QidList .
    op printCounterexample : TransitionList -> QidList .

    op simulate : Term -> Term .

    vars CONF CONF' : Configuration .
    vars SERV SERV' : SemServer .
    vars S S' INPUT TEXT : String .
    var IOVAL : IOValue .
    var ~RES : [EvalResult] .
    var RES : EvalResult .
    var STATE : State .
    var FUNCS : FuncStorage .
    var VARS : VarStorage .
    var STACK : Stack .
    vars CODE CODE' : StmtAST .
    vars EXPR : ExprAST .
    var ATTRS : AttributeSet .
    vars COMP COMP' T T' : Term .
    vars COMP? COMP?' : Term? .
    var N : Nat .
    vars O O' IN OUT : Oid .
    var TRACE? : Trace? .
    var TRACE : Trace .
    var COUNTER : Term? .
    var TYPE : Type .
    var R : Rule .
    var QI : Qid .
    var QIL : QidList .
    var RP? : ResultPair? .
    var FORM : Formula .
    var MCRES : ModelCheckResult .
    vars CE CE' : TransitionList .
    var RULE : RuleName .

    eq printTrace(failure) = 'Model '\s 'is '\s 'valid. '\s 'No '\s 'trace '\s 'to '\s 'show. '\n .
    eq printTrace(nil) = 'END '\s 'OF '\s 'TRACE '\n .
    eq printTrace({COUNTER, TYPE, R} TRACE) = printAst(COUNTER) '\n '\n '\n '\s '\s '\s '\s 'vvvvvvvvvvvvv '\n '\s '\s '\s '\s 'vvvvvvvvvvvvv '\n printTrace(TRACE) .
    eq printTrace(TRACE?, T) = printTrace(TRACE?) '\n '\n '\n printAst(T) .

    eq printCheckResult(true) = 'Valid '\n .
    eq printCheckResult(counterexample(CE, CE')) = 'Invalid: '\n 'Starting '\s 'at: '\n printCounterexample(CE) '\n 'With '\s 'loop: '\n printCounterexample(CE') .
    eq printCheckResultShort(counterexample(CE, CE')) = 'Invalid: '\n 'With '\s 'loop: '\n printCounterexample(CE') .

    ceq printCounterexample({statePair(CONF, CODE), RULE} CE) = printCounterexample(CE) if RULE == unlabeled .
    ceq printCounterexample({statePair(CONF, CODE), RULE} CE) = printAst(upTerm(CONF)) '\n '--> '\n printCounterexample(CE) if RULE =/= unlabeled .
    eq printCounterexample(nil) = 'END '\n . 

    ceq tokenToString('token[T]) = string(downTerm(T, '$err)) if not parsePredefined(T, 'STRING, 'String) :: ResultPair .
    ceq tokenToString('token[T]) = downTerm(getTerm(parsePredefined(T, 'STRING, 'String)), "") if parsePredefined(T, 'STRING, 'String) :: ResultPair .

    eq getErrorPosition(noParse(N)) = N .


    eq commandToState('model`from_[T], TYPE) = loadingComposition(tokenToString(T)) .
    eq commandToState('assertions`from_[T], TYPE) = loadingAssertions(tokenToString(T)) .
    eq commandToState('trace`to_[T], TYPE) = printingTrace(tokenToString(T)) .
    eq commandToState('always_[T], TYPE) = checkingAlways(processLang(T)) .
    eq commandToState('check`last`state_[T], TYPE) = checkingLastState(processLang(T)) .
    eq commandToState('show`state.Command, TYPE) = showingState .
    eq commandToState('show`trace.Command, TYPE) = printingTrace .
    eq commandToState('reset.Command, TYPE) = resetting .
    eq commandToState('reset`code.Command, TYPE) = resettingCode .
    eq commandToState('reset`model.Command, TYPE) = resettingModel .
    eq commandToState('quit.Command, TYPE) = quitting .
    eq commandToState('simulate.Command, TYPE) = simulating .
    eq commandToState('dump`simulation.Command, TYPE) = dumpingSimulationResult .
    eq commandToState('dump`last`state.Command, TYPE) = dumpingLastState .
    eq commandToState('dump`init.Command, TYPE) = dumpingInit .
    eq commandToState('ltl`check_[T], TYPE) = checkingLtl(processLtl(T)) .
    eq commandToState('dump`ltl`result.Command, TYPE) = dumpingLtlResult .
    eq commandToState('dump`code.Command, TYPE) = dumpingCode .
    ceq commandToState(T, TYPE) = loadingTermComposition(T) if sortLeq(upModule('LOOP-COMMANDS, false), TYPE, 'ServiceList) .

    eq mergeConfigs(COMP', COMP) = upTerm(mergeConfigs(downTerm(COMP', (none).Configuration), downTerm(COMP, (none).Configuration))) .
    eq mergeConfigs(service(S, SERV) CONF, service(S, SERV') CONF') = service(S, SERV') mergeConfigs(CONF, CONF') .
    eq mergeConfigs(CONF, CONF') = CONF CONF' [owise] .
    eq mergeConfigs(noTerm, COMP) = COMP .

    eq parseCommand(S) = parseCommand(tokenize(S)) .
    eq parseCommand(QIL) = metaParse(upModule('LOOP-COMMANDS, false), QIL, 'Command) .

    eq parseLang(S) = metaParse(upModule('LANG-SYNTAX, false), tokenize(S), 'TopLevel) .

    eq searchCounterexample(COMP, CODE) = metaSearch(upModule('ASSERTION-CHECK, true), COMP, 'C:Configuration, ('satisfies['C:Configuration, upTerm(CODE)] = 'false.Bool), '*, unbounded, 0) .
    eq getCounterexamplePath(COMP, CODE) = metaSearchPath(upModule('ASSERTION-CHECK, true), COMP, 'C:Configuration, ('satisfies['C:Configuration, upTerm(CODE)] = 'false.Bool), '*, unbounded, 0) .

    eq simulate(COMP) = getTerm(metaRewrite(['ASSERTION-CHECK], COMP, unbounded)) .

    eq printEvalResult(~RES) = metaPrettyPrint(['ASSERTION-CHECK], none, upTerm(~RES), mixfix format number rat) .
    eq dumpConfig(COMP) = metaPrettyPrint(['COMPOSITION], none, COMP, mixfix format number rat) .

    rl < cliReader : CliReader | state : writing, output : (QI QIL), stdio : true, ATTRS >
    =>
        < cliReader : CliReader | state : writing, output : nil, stdio : true, ATTRS >
        write(stdout, cliReader, printTokens(QI QIL) + "\n")
    .

    rl < cliReader : CliReader | state : writing, stdio : true, ATTRS >
        wrote(cliReader, stdout)
    =>
        < cliReader : CliReader | state : idle, stdio : true, ATTRS >
    .

    rl < cliReader : CliReader | buf : S, state : idle, stdio : true, ATTRS >
    =>
        < cliReader : CliReader | buf : S, state : reading, stdio : true, ATTRS >
        getLine(stdin, cliReader, "> ")
    .

    rl < cliReader : CliReader | buf : S, state : reading, input : failure, stdio : true, output : nil, ATTRS >
        gotLine(cliReader, O', INPUT)
    =>
        if (parseCommand(S + INPUT) :: ResultPair) then
            < cliReader : CliReader | buf : "", state : reading, input : parseCommand(S + INPUT), stdio : true, output : nil, ATTRS >
        else
            if getErrorPosition(parseCommand(S + INPUT)) == size(tokenize(S + INPUT)) then
                < cliReader : CliReader | buf : (S + INPUT), state : idle, input : failure, stdio : true, output : nil, ATTRS >
            else
                < cliReader : CliReader | buf : "", state : writing, input : failure, stdio : true, output : formatErrorString(S + INPUT, parseCommand(S + INPUT)), ATTRS >
            fi
        fi
    .


    rl < cliReader : CliReader | input : {T, TYPE}, state : reading, ATTRS >
    =>
        < cliReader : CliReader | input : failure, state : commandToState(T, TYPE), ATTRS >
    .

    rl < cliReader : CliReader | 
        state : loadingTermComposition(T),
        composition : COMP?,
        assertions : CODE,
        output : QIL,
    ATTRS >
    =>
            if processConfig(T) :: Configuration then
                if processProps(T) :: StmtAST then
                    < cliReader : CliReader | 
                        state : writing, 
                        composition : mergeConfigs(COMP?, upTerm(processConfig(T))),
                        assertions : (CODE ; processProps(T)), 
                        output : ('Composition '\s 'is '\s 'loaded),
                    ATTRS >
                else
                    < cliReader : CliReader | 
                        state : writing, 
                        composition : COMP?, 
                        assertions : CODE,
                        output : getLangProcessError(processProps(T)),
                    ATTRS >
                fi
            else
                < cliReader : CliReader | 
                    state : writing, 
                    composition : COMP?, 
                    assertions : CODE,
                    output : getCompositionError(processConfig(T)),
                ATTRS >
            fi
    .


    rl < cliReader : CliReader | 
        state : checkingAlways(EXPR), 
        assertions : CODE, 
        composition : COMP, 
        counterexamplePath : TRACE?,
        counterexampleState : COUNTER,
        output : QIL,
    ATTRS >
    => 
        if searchCounterexample(COMP, CODE ; EXPR) :: ResultTriple then
            < cliReader : CliReader | 
                state : writing, 
                assertions : CODE, 
                composition : COMP, 
                counterexamplePath : getCounterexamplePath(COMP, CODE ; EXPR),
                counterexampleState : getTerm(searchCounterexample(COMP, CODE ; EXPR)),
                output : ('Invalid!),
            ATTRS >
        else
            < cliReader : CliReader | 
                state : writing, 
                assertions : CODE, 
                composition : COMP, 
                counterexamplePath : TRACE?,
                counterexampleState : COUNTER,
                output : 'Valid!,
            ATTRS >
        fi
    .

    rl < cliReader : CliReader | 
        state : checkingLastState(EXPR), 
        assertions : CODE, 
        composition : COMP,
        counterexamplePath : TRACE?,
        counterexampleState : COUNTER,
        output : QIL,
    ATTRS >
    => 
        < cliReader : CliReader | 
            state : writing, 
            assertions : CODE, 
            composition : COMP,
            counterexamplePath : TRACE?,
            counterexampleState : COUNTER,
            output : printEvalResult(evalStmt(CODE ; EXPR, toState(downTerm(COUNTER, none)))),
        ATTRS >
    .

    rl < cliReader : CliReader | 
        state : showingState,
        counterexampleState : COUNTER,
        output : QIL,
    ATTRS >
    => 
        if COUNTER =/= noTerm then
            < cliReader : CliReader | 
                state : writing, 
                counterexampleState : COUNTER,
                output : printAst(COUNTER),
            ATTRS >
        else
            < cliReader : CliReader | 
                state : writing,
                counterexampleState : COUNTER,
                output : ('Property '\s 'is '\s 'valid),
            ATTRS >
        fi
    .

    rl < cliReader : CliReader | 
        state : resetting, 
        assertions : CODE, 
        composition : COMP,
        output : QIL,
    ATTRS >
    => < cliReader : CliReader | 
            state : writing, 
            assertions : pass, 
            composition : upTerm(initConfig),
            output : ('Success),
        ATTRS >
    .

    rl < cliReader : CliReader | 
        state : resettingCode, 
        assertions : CODE,
        output : QIL,
    ATTRS >
    => < cliReader : CliReader | 
            state : writing, 
            assertions : pass,
            output : 'Success,
        ATTRS >
    .

    rl < cliReader : CliReader | 
        state : resettingModel,
        composition : COMP,
        output : QIL,
    ATTRS >
    => < cliReader : CliReader | 
            state : writing,
            composition : upTerm(initConfig),
            output : 'Success,
        ATTRS >
    .

    rl < cliReader : CliReader | 
        state : printingTrace,
        output : QIL,
        counterexamplePath : TRACE?,
        counterexampleState : COUNTER,
    ATTRS >
    =>
        < cliReader : CliReader | 
            state : writing,
            counterexamplePath : TRACE?,
            counterexampleState : COUNTER,
            output : printTrace(TRACE?, COUNTER),
        ATTRS >
    .
    
    rl < cliReader : CliReader | 
        state : simulating, 
        composition : COMP,
        simulationResult : COMP?,
    ATTRS >
    => 
    < cliReader : CliReader | 
        state : printingSimulationResult, 
        composition : COMP,
        simulationResult : simulate(COMP),
    ATTRS >
    .

    rl < cliReader : CliReader | 
        state : printingSimulationResult,
        simulationResult : COMP?,
        output : QIL,
    ATTRS >
    => 
    < cliReader : CliReader | 
        state : writing, 
        simulationResult : COMP?,
        output : printAst(COMP?),
    ATTRS >
    .

    rl < cliReader : CliReader | 
        state : dumpingSimulationResult,
        simulationResult : COMP?,
        output : QIL,
    ATTRS >
    => 
    < cliReader : CliReader | 
        state : writing, 
        simulationResult : COMP?,
        output : dumpConfig(COMP?),
    ATTRS >
    .

    rl < cliReader : CliReader | 
        state : dumpingLastState,
        counterexampleState : COMP?,
        output : QIL,
    ATTRS >
    => 
    < cliReader : CliReader | 
        state : writing, 
        counterexampleState : COMP?,
        output : dumpConfig(COMP?),
    ATTRS >
    .

    rl < cliReader : CliReader | 
        state : checkingLtl(FORM),
        ltlResult : MCRES,
        assertions : CODE, 
        composition : COMP,
        output : QIL,
    ATTRS >
    => 
    < cliReader : CliReader | 
        state : writing,
        ltlResult : modelCheck(statePair(downTerm(COMP, (none).Configuration), CODE), FORM),
        assertions : CODE, 
        composition : COMP,
        output : printCheckResult(modelCheck(statePair(downTerm(COMP, (none).Configuration), CODE), FORM)),
    ATTRS >
    .

    rl < cliReader : CliReader | 
        state : dumpingLtlResult,
        ltlResult : counterexample(CE', CE { statePair(CONF, CODE), deadlock }),
        output : QIL,
    ATTRS >
    => 
    < cliReader : CliReader | 
        state : writing,
        ltlResult : counterexample(CE', CE { statePair(CONF, CODE), deadlock }),
        output : metaPrettyPrint(['COMPOSITION-PREDS], none, upTerm(statePair(CONF, CODE)),  mixfix format number rat),
    ATTRS >
    .

    rl < cliReader : CliReader | 
        state : dumpingInit,
        composition : COMP,
        output : QIL,
    ATTRS >
    => 
    < cliReader : CliReader | 
        state : writing,
        composition : COMP,
        output : metaPrettyPrint(['COMPOSITION], none, COMP,  mixfix format number rat),
    ATTRS >
    .

    rl < cliReader : CliReader | 
        state : dumpingCode,
        assertions : CODE,
        output : QIL,
    ATTRS >
    => 
    < cliReader : CliReader | 
        state : writing,
        assertions : CODE,
        output : metaPrettyPrint(['COMPOSITION], none, upTerm(CODE),  mixfix format number rat),
    ATTRS >
    .

    var QIDList : QidList .
    var QID : Qid .

    op toEval : QidList -> Bool .
    eq toEval(QID QIDList) = true .
    eq toEval(nil) = false .

    op init : -> Configuration .
    eq init = < cliReader : CliReader | 
        buf : "", 
        state : idle, 
        composition : upTerm(initConfig), 
        assertions : pass,
        counterexampleState : noTerm,
        counterexamplePath : nil,
        simulationResult : noTerm,
        stdio : true,
        input : failure,
        output : nil,
        ltlResult : true
    > <> .
endm

mod CLI-LOOP is
    including LOOP-MODE .
    protecting CLI * (sort State to LangState) .

    subsort Object < State .

    op initLoop : -> System .

    rl [initLoop] :
     initLoop
     => [nil,
        < cliReader : CliReader |
            state : idle, 
            composition : upTerm(initConfig), 
            assertions : pass,
            counterexampleState : noTerm,
            counterexamplePath : nil,
            simulationResult : noTerm,
            stdio : false,
            input : failure,
            output : nil,
            ltlResult : true
        >,
         ('\n '\t '\s '\s '\s '\s '\s '\s '\s '\s '\s '\s 'WS '\s 'Verifier '\n)] .


    var Attrs : AttributeSet .
    var QI : Qid .
    vars QIL QIL' QIL'' : QidList .
    var O : Oid .
    
    rl [in] :
    [QI QIL,
     < O : CliReader |
         input : failure, 
         output : nil, 
         state : idle,
         Attrs 
    >,
     QIL']
    =>  if parseCommand(QI QIL) :: ResultPair then
            [nil,
             < O : CliReader |
                input : parseCommand(QI QIL),
                output : nil,
                state : reading,
            Attrs >,
            QIL']
        else
            [nil,
             < O : CliReader |
                input : failure,
                output : formatErrorString(QI QIL, parseCommand(QI QIL)),
                state : writing, 
            Attrs >,
            QIL'
            ]
        fi
    .

    rl [out] :
    [QIL,
     < O : CliReader | state : writing, output : (QI QIL'), Attrs >,
     QIL'']
    => [QIL,
        < O : CliReader | state : idle, output : nil, Attrs >,
        (QI QIL' QIL'')
        ] .
    
    var ~QIL ~QIL' ~QIL'' ~QIL''' : [QidList] .


    crl [out-else] :
    [QIL,
     < O : CliReader | output : ~QIL, Attrs >,
     QIL'']
    => [QIL,
        < O : CliReader | output : nil, Attrs >,
        metaPrettyPrint(['CLI], none, upTerm(< O : CliReader | state : idle, output : nil, Attrs >), mixfix format number rat)
        ] if not ~QIL :: QidList .
    
endm

select CLI-LOOP .
loop initLoop .
